#ifndef lint
static char const 
yyrcsid[] = "$FreeBSD: src/usr.bin/yacc/skeleton.c,v 1.28 2000/01/17 02:04:06 bde Exp $";
#endif
#include <stdlib.h>
#define YYBYACC 1
#define YYMAJOR 1
#define YYMINOR 9
#define YYLEX yylex()
#define YYEMPTY -1
#define yyclearin (yychar=(YYEMPTY))
#define yyerrok (yyerrflag=0)
#define YYRECOVERING() (yyerrflag!=0)
static int yygrowstack();
#define YYPREFIX "yy"
#line 2 "src/parser.y"

#include <string>
#include <vector>
#include <stack>
#include <boost/algorithm/string.hpp>
#include "machine.h"
#include "parser_code.h"
#include "prsp_ctx.h"

using namespace ai::app;

namespace ai
{
namespace app
{

extern int errcnt;
extern int inquote;
extern int incomments;
extern string tminline;
extern int column;

}
}

extern int yylex();

#line 88 "src/parser.y"
typedef union
{
	parser_string_t *sval;
	parser_item_t *item;
	parser_pointers_t *pointers;
	parser_type_t *type;
	parser_variable_t *variable;
	parser_expr_t *expr;
	parser_exprs_t *exprs;
	parser_stmt_t *stmt;
	parser_declare_t *declare;
	parser_ctrl_t *ctrl;
	parser_expr_stmt_t *expr_stmt;
	parser_if_stmt_t *if_stmt;
	parser_for_stmt_t *for_stmt;
	parser_switch_stmt_t *switch_stmt;
	parser_while_stmt_t *while_stmt;
	parser_dowhile_stmt_t *dowhile_stmt;
	parser_goto_stmt_t *goto_stmt;
	parser_break_stmt_t *break_stmt;
	parser_continue_stmt_t *continue_stmt;
	parser_return_stmt_t *return_stmt;
	parser_blank_stmt_t *blank_stmt;
	parser_question_stmt_t *question_stmt;
	parser_compound_stmt_t *compound_stmt;
	parser_label_stmt_t *label_stmt;
 	parser_stmts_t *stmts;
	parser_args_t *args;
	parser_cases_t *switch_items;
	parser_case_t *switch_item;
} YYSTYPE;
#line 77 "src/parser.cpp"
#define YYERRCODE 256
#define BADTOKEN 257
#define COLON 258
#define LBRACE 259
#define RBRACE 260
#define SEMICOLON 261
#define NULL_OP 262
#define SWITCH 263
#define CASE 264
#define BREAK 265
#define CONTINUE 266
#define DEFAULT 267
#define DO 268
#define WHILE 269
#define FOR 270
#define GOTO 271
#define RETURN 272
#define TYPE_CHAR 273
#define TYPE_SHORT 274
#define TYPE_INT 275
#define TYPE_LONG 276
#define TYPE_FLOAT 277
#define TYPE_DOUBLE 278
#define TYPE_TIME_T 279
#define TYPE_UNSIGNED 280
#define CCONSTANT 281
#define ICONSTANT 282
#define UICONSTANT 283
#define LCONSTANT 284
#define ULCONSTANT 285
#define FCONSTANT 286
#define DCONSTANT 287
#define IDENT 288
#define STRING 289
#define IF 290
#define ELSE 291
#define COMMA 292
#define QUESTION 293
#define ASSIGN 294
#define ADD_ASSIGN 295
#define SUB_ASSIGN 296
#define MUL_ASSIGN 297
#define DIV_ASSIGN 298
#define MOD_ASSIGN 299
#define LSHIFT_ASSIGN 300
#define RSHIFT_ASSIGN 301
#define BITAND_ASSIGN 302
#define BITXOR_ASSIGN 303
#define BITOR_ASSIGN 304
#define OR 305
#define AND 306
#define BITOR 307
#define BITXOR 308
#define BITAND 309
#define EQ 310
#define NEQ 311
#define LT 312
#define LE 313
#define GT 314
#define GE 315
#define LSHIFT 316
#define RSHIFT 317
#define ADD 318
#define SUB 319
#define MUL 320
#define DIV 321
#define MOD 322
#define DPOINTER 323
#define NOT 324
#define BITNOT 325
#define INC 326
#define DEC 327
#define UMINUS 328
#define UADD 329
#define DOT 330
#define POINTER 331
#define ADDRESS 332
#define SIZEOF 333
#define LCURVE 334
#define RCURVE 335
#define LBRACKET 336
#define RBRACKET 337
const short yylhs[] = {                                        -1,
    0,    0,    1,    1,    2,    2,    2,    2,    5,    5,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    3,    4,    4,    7,    7,    7,    6,    6,    8,
    8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
    8,    8,    8,    9,    9,   10,   10,   11,   24,   24,
   12,   25,   25,   26,   26,   27,   27,   27,   27,   27,
   13,   14,   15,   16,   17,   18,   18,   21,   21,   19,
   20,   22,   23,   23,   23,   23,   23,   23,   23,   23,
   23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
   23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
   23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
   23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
   23,   23,   23,   23,   23,   28,   28,
};
const short yylen[] = {                                         2,
    1,    2,    1,    1,    3,    5,    4,    6,    1,    2,
    1,    2,    1,    2,    1,    2,    1,    1,    2,    1,
    1,    1,    1,    2,    1,    3,    5,    3,    4,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    2,    3,    5,    7,    9,    1,    0,
    7,    1,    2,    4,    3,    1,    1,    1,    1,    1,
    5,    7,    3,    2,    2,    2,    3,    3,    2,    1,
    6,    2,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    4,    3,    2,    3,    4,    1,    3,
};
const short yydefred[] = {                                      0,
    0,   70,    0,    0,    0,    0,    0,    0,    0,    0,
   11,   13,   15,   18,   20,   21,   22,    0,   73,   74,
   75,   76,   77,   78,   79,    0,   80,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    3,    0,    0,   81,    4,   30,   31,   32,   33,   34,
   35,   36,   37,   38,   39,   40,   41,   42,   43,    0,
   69,    0,    0,   64,   65,    0,    0,    0,    0,   66,
    0,    0,   12,   14,   16,   19,   72,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    2,    0,   10,    0,    0,   44,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  113,  115,    0,
  123,   68,    0,    0,    0,    0,    0,   63,   67,    0,
  122,    0,    0,    0,    0,  124,   24,    5,    0,    0,
   45,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  121,    0,
  125,    0,    7,    0,    0,   28,    0,    0,   61,    0,
   27,  127,    0,    6,    0,    0,   29,    0,    0,    0,
    0,    0,    0,    0,    8,   71,   56,   57,   58,   59,
   60,    0,    0,   51,   53,   62,    0,   47,    0,   55,
    0,   54,   48,
};
const short yydgoto[] = {                                      39,
   40,   41,   42,   94,   43,  131,   44,   45,   46,   47,
   48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
   58,   59,   60,  137,  210,  211,  222,  143,
};
const short yysindex[] = {                                   1779,
 1703,    0, -327, -236, -232, 2173, -303, -268, -207, 2185,
    0,    0,    0,    0,    0,    0,    0, -239,    0,    0,
    0,    0,    0,    0,    0, -254,    0, -246, 2259, 2259,
 2259, 2259, 2259, 2259, 2259, 2259, 2259, 2247,    0, 1779,
    0, -231, -196,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1822,
    0, -166, 2259,    0,    0, -173, 2259, 2259, -164,    0,
 -308, 1963,    0,    0,    0,    0,    0, -190, 1576, 2259,
 -312, -312, -312, -312, -312, -312, -312, -312, -312, -235,
 2389,    0, -231,    0, -229,  -98,    0, 2259, 2259, 2259,
 2259, 2259, 2259, 2259, 2259, 2259, 2259, 2259, 2259, 2259,
 2259, 2259, 2259, 2259, 2259, 2259, 2259, 2259, 2259, 2259,
 2259, 2259, 2259, 2259, 2259, 2259, 2259,    0,    0, 2259,
    0,    0, 2432, -230, 2475, 2604, -162,    0,    0, -228,
    0, 2302, -191, 2518, 2259,    0,    0,    0, 2259, -256,
    0, 1916, 1634, 2604, 2604, 2604, 2604, 2604, 2604, 2604,
 2604, 2604, 2604, 2604, 1688, 2632, 1214, 1094,  970,  970,
   66,   66,   66,   66, -309, -309, -174, -174, -312, -312,
 -312, 2345, -152, 2259, 2173, 2259, -182, 2259,    0, 2173,
    0, 2010,    0, 2259, 2259,    0, -244, 2561,    0, -112,
    0,    0, -141,    0, 2057, 2104,    0, -198, -107, -105,
 -244, -102, 2259, 2173,    0,    0,    0,    0,    0,    0,
    0,  -94, 1779,    0,    0,    0, -168,    0, 1779,    0,
 2173,    0,    0,
};
const short yyrindex[] = {                                      0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, -145,    0,    0,
    0,    0,    0,    0,    0, 1869,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   32,
    0, -260,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  -91,    0,    0,
   44,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  178,  243,  308,  373,  438,  503,  568,  633,  698,    0,
    0,    0, -258,    0,  -96,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, -253,    0,    0,    0,  111,
    0, -167,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, -153, -116, -104, -100,  -92,  -78,   39,
 1549, 1582, 1586, 1590, 1534, 1519, 1469, 1451, 1376, 1396,
 -242, 1202, 1260, 1318, 1082, 1142,  958, 1020,  763,  828,
  893,    0,    0,    0,    0,  -91,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    1,    0,    0,    0,    0,    0,    0,    0,
  -89,    0, -163,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,
};
const short yygindex[] = {                                     -1,
    0,    0,    0,   80,  136,  -93,  135,   -4,   81,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   11, -180,  -26,    0,    0,    3,
};
#define YYTABLESIZE 2968
const short yytable[] = {                                      62,
   46,   66,  150,   77,  193,  200,   63,   49,  123,  124,
  125,  126,  127,  128,  129,   99,  128,  129,   99,  208,
   72,   78,  209,  130,   64,   79,  130,    9,   65,   23,
   67,    1,  227,   73,   74,   75,   76,  194,   92,   81,
   82,   83,   84,   85,   86,   87,   88,   89,   91,   99,
   99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
   99,   99,   99,   99,   99,   68,   99,   99,   99,   99,
   99,   99,   99,  133,    9,   78,   23,  135,  136,   79,
   69,   49,  217,  218,  219,  220,  221,   80,   93,  142,
  144,   95,   99,  132,   99,  134,  138,  140,  186,  145,
   78,  187,  207,  184,   82,  201,  197,   82,  152,  153,
  154,  155,  156,  157,  158,  159,  160,  161,  162,  163,
  164,  165,  166,  167,  168,  169,  170,  171,  172,  173,
  174,  175,  176,  177,  178,  179,  180,  181,   82,   82,
  182,   83,   17,  189,   83,  125,  126,  127,  213,  214,
  223,  128,  129,   84,  224,  191,   84,   85,  226,  192,
   85,  130,  148,  229,   25,   86,  231,  126,   86,   50,
   52,   50,  147,   90,   17,   83,   83,   96,  151,   87,
  199,   82,   87,   82,  225,  203,    0,   84,   84,   17,
  202,   85,   85,    0,  198,  149,  136,   25,  142,   86,
   86,    0,    0,    0,  205,  206,    0,    0,    0,  228,
    0,    0,    0,   87,   87,    0,    0,    0,   83,    0,
   83,  230,    0,  136,    0,    0,  233,  232,    0,    0,
   84,    0,   84,    0,   85,    0,   85,  130,    0,   25,
    0,    0,   86,    0,   86,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   87,    0,   87,   46,
   46,   46,    0,   46,   46,   46,   46,   46,   46,   46,
   46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
   46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
   46,    1,    0,    0,    0,    1,   88,    0,    1,   88,
    0,   25,    0,    0,   25,    0,    0,    0,    0,   46,
    0,    0,    0,    0,    0,    0,    0,    0,   46,   46,
   46,    0,    0,    0,   46,   46,   46,   46,    0,    0,
   88,   88,    0,   46,   46,   25,   25,   25,   25,   25,
   25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
   25,    0,   25,   25,   25,   25,   25,   25,   25,   25,
   25,   25,   25,   25,   25,   25,    0,    0,   26,   25,
   25,   26,    0,   88,    0,   88,    0,    0,   25,   25,
   25,  121,  122,  123,  124,  125,  126,  127,    0,    0,
    0,  128,  129,    0,    0,    0,    0,    0,    0,    0,
    0,  130,   26,   26,   26,   26,   26,   26,   26,   26,
   26,   26,   26,   26,   26,   26,   26,   26,    0,   26,
   26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
   26,   26,   26,    0,    0,  119,   26,   26,  119,    0,
    0,    0,    0,    0,    0,   26,   26,   26,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  119,
  119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
  119,  119,  119,  119,  119,    0,  119,  119,  119,  119,
  119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
  116,    0,    0,  116,    0,    0,    0,    0,    0,    0,
    0,    0,  119,    0,  119,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  116,  116,  116,  116,  116,  116,
  116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
    0,  116,  116,  116,  116,  116,  116,  116,  116,  116,
  116,  116,  116,  116,  116,  117,    0,    0,  117,    0,
    0,    0,    0,    0,    0,    0,    0,  116,    0,  116,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  117,
  117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
  117,  117,  117,  117,  117,    0,  117,  117,  117,  117,
  117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
  118,    0,    0,  118,    0,    0,    0,    0,    0,    0,
    0,    0,  117,    0,  117,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  118,  118,  118,  118,  118,  118,
  118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
    0,  118,  118,  118,  118,  118,  118,  118,  118,  118,
  118,  118,  118,  118,  118,  110,    0,    0,  110,    0,
    0,    0,    0,    0,    0,    0,    0,  118,    0,  118,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  110,
  110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
  110,  110,  110,  110,  110,    0,  110,  110,  110,  110,
  110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
  111,    0,    0,  111,    0,    0,    0,    0,    0,    0,
    0,    0,  110,    0,  110,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  111,  111,  111,  111,  111,  111,
  111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
    0,  111,  111,  111,  111,  111,  111,  111,  111,  111,
  111,  111,  111,  111,  111,  112,    0,    0,  112,    0,
    0,    0,    0,    0,    0,    0,    0,  111,    0,  111,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  112,
  112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
  112,  112,  112,  112,  112,    0,  112,  112,  112,  112,
  112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
  114,    0,    0,  114,    0,    0,    0,    0,    0,    0,
    0,    0,  112,    0,  112,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  114,  114,  114,  114,  114,  114,
  114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
    0,  114,  114,  114,  114,  114,  114,  114,  114,  114,
  114,  114,  114,  114,  114,  120,    0,    0,  120,    0,
    0,    0,    0,    0,    0,    0,    0,  114,    0,  114,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  120,
  120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
  120,  120,  120,  120,  120,    0,  120,  120,  120,  120,
  120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
  107,    0,    0,  107,    0,    0,    0,    0,    0,    0,
    0,    0,  120,    0,  120,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  107,  107,  107,  107,  107,  107,
  107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
    0,  107,  107,  107,  107,  107,  107,  107,  107,  107,
  107,  107,  107,  107,  107,  108,    0,    0,  108,    0,
    0,    0,    0,    0,    0,    0,    0,  107,    0,  107,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  108,
  108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
  108,  108,  108,  108,  108,    0,  108,  108,  108,  108,
  108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
  109,    0,    0,  109,    0,    0,    0,    0,    0,    0,
    0,    0,  108,    0,  108,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  109,  109,  109,  109,  109,  109,
  109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
    0,  109,  109,  109,  109,  109,  109,  109,  109,  109,
  109,  109,  109,  109,  109,  105,    0,    0,  105,    0,
    0,    0,    0,    0,    0,    0,    0,  109,    0,  109,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  105,
  105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
  105,  105,  105,  105,  105,    0,  105,  105,  105,  105,
  105,  105,  105,  105,  105,  105,  105,  106,    0,    0,
  106,  117,  118,  119,  120,  121,  122,  123,  124,  125,
  126,  127,  105,    0,  105,  128,  129,    0,    0,    0,
    0,    0,    0,    0,    0,  130,    0,    0,    0,    0,
    0,  106,  106,  106,  106,  106,  106,  106,  106,  106,
  106,  106,  106,  106,  106,  106,  106,    0,  106,  106,
  106,  106,  106,  106,  106,  106,  106,  106,  106,  103,
    0,    0,  103,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  106,    0,  106,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  103,  103,  103,  103,  103,  103,  103,
  103,  103,  103,  103,  103,  103,  103,  103,  103,    0,
  103,  103,  103,  103,  103,  103,  103,  103,  103,  104,
    0,    0,  104,  115,  116,  117,  118,  119,  120,  121,
  122,  123,  124,  125,  126,  127,  103,    0,  103,  128,
  129,    0,    0,    0,    0,    0,    0,    0,    0,  130,
    0,    0,    0,  104,  104,  104,  104,  104,  104,  104,
  104,  104,  104,  104,  104,  104,  104,  104,  104,    0,
  104,  104,  104,  104,  104,  104,  104,  104,  104,  100,
    0,    0,  100,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  104,    0,  104,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  100,  100,  100,  100,  100,  100,  100,
  100,  100,  100,  100,  100,  100,  100,  100,  100,    0,
  100,  100,  100,  100,  100,  100,  100,  101,    0,    0,
  101,    0,  114,  115,  116,  117,  118,  119,  120,  121,
  122,  123,  124,  125,  126,  127,  100,    0,  100,  128,
  129,    0,    0,    0,    0,    0,    0,    0,    0,  130,
    0,  101,  101,  101,  101,  101,  101,  101,  101,  101,
  101,  101,  101,  101,  101,  101,  101,    0,  101,  101,
  101,  101,  101,  101,  101,  102,    0,    0,  102,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  101,    0,  101,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  102,
  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
  102,  102,  102,  102,  102,    0,  102,  102,  102,  102,
  102,  102,  102,   97,    0,    0,   97,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  102,   98,  102,    0,   98,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   97,   97,   97,
   97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
   97,   97,   97,    0,   97,   97,   97,   98,   98,   98,
   98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
   98,   98,   98,    0,   98,   98,   98,    0,   96,    0,
   97,   96,   97,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   95,    0,    0,   95,
   98,    0,   98,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   96,   96,   96,   96,   96,   96,   96,   96,
   96,   96,   96,   96,   96,   96,   96,   96,    0,   96,
   95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
   95,   95,   95,   95,   95,   95,   94,    0,    0,   94,
    0,    0,    0,    0,    0,   96,    0,   96,    0,    0,
    0,   93,    0,    0,   93,    0,    0,    0,    0,    0,
    0,    0,    0,   95,    0,   95,   89,    0,    0,   89,
   94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
   94,   94,   94,   94,   94,   93,   93,   93,   93,   93,
   93,   93,   93,   93,   93,   93,   93,   93,   93,   90,
   89,   89,   90,   91,    0,    0,   91,   92,    0,    0,
   92,    0,    0,   94,    0,   94,   19,   20,   21,   22,
   23,   24,   25,   71,   27,    0,    0,    0,   93,    0,
   93,    0,    0,   90,   90,    0,    0,   91,   91,    0,
    0,   92,   92,   89,   29,   89,    0,    0,    0,    0,
    0,  195,    0,   30,   31,   32,    0,    0,    0,   33,
   34,   35,   36,    0,    0,    0,    0,    0,   37,   38,
  141,    0,    0,    0,    0,    0,   90,    0,   90,    0,
   91,    0,   91,    0,   92,    0,   92,  100,  101,  102,
  103,  104,  105,  106,  107,  108,  109,  110,  111,  112,
  113,    0,  114,  115,  116,  117,  118,  119,  120,  121,
  122,  123,  124,  125,  126,  127,    0,    0,    0,  128,
  129,    1,   61,    2,    0,    3,    0,    4,    5,  130,
    6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
   16,   17,   18,   19,   20,   21,   22,   23,   24,   25,
   26,   27,   28,  112,  113,    0,  114,  115,  116,  117,
  118,  119,  120,  121,  122,  123,  124,  125,  126,  127,
    0,   29,    0,  128,  129,    0,    0,    0,    0,    0,
   30,   31,   32,  130,    0,    0,   33,   34,   35,   36,
    0,    0,    0,    0,    0,   37,   38,    1,    0,    2,
    0,    3,    0,    4,    5,    0,    6,    7,    8,    9,
   10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
   20,   21,   22,   23,   24,   25,   26,   27,   28,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   97,    0,    0,    0,    0,   29,    0,    0,
    0,    0,    0,    0,    0,    0,   30,   31,   32,    0,
    0,    0,   33,   34,   35,   36,    0,    0,    0,    0,
    0,   37,   38,   98,   99,  100,  101,  102,  103,  104,
  105,  106,  107,  108,  109,  110,  111,  112,  113,   25,
  114,  115,  116,  117,  118,  119,  120,  121,  122,  123,
  124,  125,  126,  127,    0,    0,    0,  128,  129,    0,
    0,    0,    0,    0,    0,    0,    0,  130,    0,    0,
   25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
   25,   25,   25,   25,   25,   25,   97,   25,   25,   25,
   25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
   25,    0,    0,    0,   25,   25,    0,    0,    0,    0,
    0,    0,    0,    0,   25,    0,    0,   98,    0,  100,
  101,  102,  103,  104,  105,  106,  107,  108,  109,  110,
  111,  112,  113,  139,  114,  115,  116,  117,  118,  119,
  120,  121,  122,  123,  124,  125,  126,  127,    0,    0,
    0,  128,  129,    0,    0,    0,    0,    0,    0,    0,
    0,  130,    0,    0,    0,    0,  100,  101,  102,  103,
  104,  105,  106,  107,  108,  109,  110,  111,  112,  113,
  204,  114,  115,  116,  117,  118,  119,  120,  121,  122,
  123,  124,  125,  126,  127,    0,    0,    0,  128,  129,
    0,    0,    0,    0,    0,    0,    0,    0,  130,    0,
    0,    0,    0,  100,  101,  102,  103,  104,  105,  106,
  107,  108,  109,  110,  111,  112,  113,  215,  114,  115,
  116,  117,  118,  119,  120,  121,  122,  123,  124,  125,
  126,  127,    0,    0,    0,  128,  129,    0,    0,    0,
    0,    0,    0,    0,    0,  130,    0,    0,    0,    0,
  100,  101,  102,  103,  104,  105,  106,  107,  108,  109,
  110,  111,  112,  113,  216,  114,  115,  116,  117,  118,
  119,  120,  121,  122,  123,  124,  125,  126,  127,    0,
    0,    0,  128,  129,    0,    0,    0,    0,    0,    0,
    0,    0,  130,    0,    0,    0,    0,  100,  101,  102,
  103,  104,  105,  106,  107,  108,  109,  110,  111,  112,
  113,    0,  114,  115,  116,  117,  118,  119,  120,  121,
  122,  123,  124,  125,  126,  127,    0,    0,    0,  128,
  129,    1,    0,    2,    0,    3,    0,    4,    5,  130,
    6,    7,    8,    9,   10,   70,    0,    0,    0,    0,
    0,    0,    0,   19,   20,   21,   22,   23,   24,   25,
   26,   27,   28,    0,    0,   19,   20,   21,   22,   23,
   24,   25,   71,   27,    0,    0,    0,    0,    0,    0,
    0,   29,    0,    0,    0,    0,    0,    0,    0,    0,
   30,   31,   32,   29,    0,    0,   33,   34,   35,   36,
    0,    0,   30,   31,   32,   37,   38,    0,   33,   34,
   35,   36,    0,    0,    0,    0,    0,   37,   38,   11,
   12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
   22,   23,   24,   25,   71,   27,    0,    0,    0,   19,
   20,   21,   22,   23,   24,   25,   71,   27,    0,    0,
    0,    0,    0,    0,    0,   29,    0,    0,    0,    0,
    0,    0,    0,    0,   30,   31,   32,   29,    0,    0,
   33,   34,   35,   36,    0,    0,   30,   31,   32,   37,
   38,    0,   33,   34,   35,   36,    0,    0,    0,    0,
    0,   37,   38,  188,    0,  100,  101,  102,  103,  104,
  105,  106,  107,  108,  109,  110,  111,  112,  113,    0,
  114,  115,  116,  117,  118,  119,  120,  121,  122,  123,
  124,  125,  126,  127,    0,    0,    0,  128,  129,    0,
    0,    0,    0,    0,    0,    0,    0,  130,  100,  101,
  102,  103,  104,  105,  106,  107,  108,  109,  110,  111,
  112,  113,    0,  114,  115,  116,  117,  118,  119,  120,
  121,  122,  123,  124,  125,  126,  127,    0,    0,    0,
  128,  129,    0,    0,    0,    0,    0,    0,    0,    0,
  130,  196,  100,  101,  102,  103,  104,  105,  106,  107,
  108,  109,  110,  111,  112,  113,    0,  114,  115,  116,
  117,  118,  119,  120,  121,  122,  123,  124,  125,  126,
  127,    0,    0,    0,  128,  129,    0,    0,    0,    0,
    0,    0,    0,  146,  130,  100,  101,  102,  103,  104,
  105,  106,  107,  108,  109,  110,  111,  112,  113,    0,
  114,  115,  116,  117,  118,  119,  120,  121,  122,  123,
  124,  125,  126,  127,    0,    0,    0,  128,  129,    0,
    0,    0,    0,    0,    0,    0,  183,  130,  100,  101,
  102,  103,  104,  105,  106,  107,  108,  109,  110,  111,
  112,  113,    0,  114,  115,  116,  117,  118,  119,  120,
  121,  122,  123,  124,  125,  126,  127,    0,    0,    0,
  128,  129,    0,    0,    0,    0,    0,    0,    0,  185,
  130,  100,  101,  102,  103,  104,  105,  106,  107,  108,
  109,  110,  111,  112,  113,    0,  114,  115,  116,  117,
  118,  119,  120,  121,  122,  123,  124,  125,  126,  127,
    0,    0,    0,  128,  129,    0,    0,    0,    0,    0,
    0,    0,  190,  130,  100,  101,  102,  103,  104,  105,
  106,  107,  108,  109,  110,  111,  112,  113,    0,  114,
  115,  116,  117,  118,  119,  120,  121,  122,  123,  124,
  125,  126,  127,    0,    0,    0,  128,  129,    0,    0,
    0,    0,    0,    0,    0,  212,  130,  100,  101,  102,
  103,  104,  105,  106,  107,  108,  109,  110,  111,  112,
  113,    0,  114,  115,  116,  117,  118,  119,  120,  121,
  122,  123,  124,  125,  126,  127,    0,    0,    0,  128,
  129,    0,    0,    0,    0,    0,    0,    0,  113,  130,
  114,  115,  116,  117,  118,  119,  120,  121,  122,  123,
  124,  125,  126,  127,    0,    0,    0,  128,  129,    0,
    0,    0,    0,    0,    0,    0,    0,  130,
};
const short yycheck[] = {                                       1,
    0,    6,   96,  258,  261,  186,  334,  261,  318,  319,
  320,  321,  322,  326,  327,  258,  326,  327,  261,  264,
   10,  330,  267,  336,  261,  334,  336,  288,  261,  288,
  334,    0,  213,  273,  274,  275,  276,  294,   40,   29,
   30,   31,   32,   33,   34,   35,   36,   37,   38,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,
  303,  304,  305,  306,  307,  334,  309,  310,  311,  312,
  313,  314,  315,   63,  335,  330,  335,   67,   68,  334,
  288,  335,  281,  282,  283,  284,  285,  334,  320,   79,
   80,  288,  335,  260,  337,  269,  261,  288,  261,  335,
  330,  330,  196,  334,  258,  288,  259,  261,   98,   99,
  100,  101,  102,  103,  104,  105,  106,  107,  108,  109,
  110,  111,  112,  113,  114,  115,  116,  117,  118,  119,
  120,  121,  122,  123,  124,  125,  126,  127,  292,  293,
  130,  258,  288,  335,  261,  320,  321,  322,  261,  291,
  258,  326,  327,  258,  260,  145,  261,  258,  261,  149,
  261,  336,  261,  258,  261,  258,  335,  335,  261,  261,
  260,  335,   93,   38,  320,  292,  293,   43,   98,  258,
  185,  335,  261,  337,  211,  190,   -1,  292,  293,  335,
  188,  292,  293,   -1,  184,  294,  186,  294,  188,  292,
  293,   -1,   -1,   -1,  194,  195,   -1,   -1,   -1,  214,
   -1,   -1,   -1,  292,  293,   -1,   -1,   -1,  335,   -1,
  337,  223,   -1,  213,   -1,   -1,  231,  229,   -1,   -1,
  335,   -1,  337,   -1,  335,   -1,  337,  336,   -1,  336,
   -1,   -1,  335,   -1,  337,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  335,   -1,  337,  259,
  260,  261,   -1,  263,  264,  265,  266,  267,  268,  269,
  270,  271,  272,  273,  274,  275,  276,  277,  278,  279,
  280,  281,  282,  283,  284,  285,  286,  287,  288,  289,
  290,  260,   -1,   -1,   -1,  264,  258,   -1,  267,  261,
   -1,  258,   -1,   -1,  261,   -1,   -1,   -1,   -1,  309,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  318,  319,
  320,   -1,   -1,   -1,  324,  325,  326,  327,   -1,   -1,
  292,  293,   -1,  333,  334,  292,  293,  294,  295,  296,
  297,  298,  299,  300,  301,  302,  303,  304,  305,  306,
  307,   -1,  309,  310,  311,  312,  313,  314,  315,  316,
  317,  318,  319,  320,  321,  322,   -1,   -1,  258,  326,
  327,  261,   -1,  335,   -1,  337,   -1,   -1,  335,  336,
  337,  316,  317,  318,  319,  320,  321,  322,   -1,   -1,
   -1,  326,  327,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  336,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,  303,  304,  305,  306,  307,   -1,  309,
  310,  311,  312,  313,  314,  315,  316,  317,  318,  319,
  320,  321,  322,   -1,   -1,  258,  326,  327,  261,   -1,
   -1,   -1,   -1,   -1,   -1,  335,  336,  337,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,
  303,  304,  305,  306,  307,   -1,  309,  310,  311,  312,
  313,  314,  315,  316,  317,  318,  319,  320,  321,  322,
  258,   -1,   -1,  261,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  335,   -1,  337,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,  303,  304,  305,  306,  307,
   -1,  309,  310,  311,  312,  313,  314,  315,  316,  317,
  318,  319,  320,  321,  322,  258,   -1,   -1,  261,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  335,   -1,  337,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,
  303,  304,  305,  306,  307,   -1,  309,  310,  311,  312,
  313,  314,  315,  316,  317,  318,  319,  320,  321,  322,
  258,   -1,   -1,  261,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  335,   -1,  337,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,  303,  304,  305,  306,  307,
   -1,  309,  310,  311,  312,  313,  314,  315,  316,  317,
  318,  319,  320,  321,  322,  258,   -1,   -1,  261,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  335,   -1,  337,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,
  303,  304,  305,  306,  307,   -1,  309,  310,  311,  312,
  313,  314,  315,  316,  317,  318,  319,  320,  321,  322,
  258,   -1,   -1,  261,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  335,   -1,  337,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,  303,  304,  305,  306,  307,
   -1,  309,  310,  311,  312,  313,  314,  315,  316,  317,
  318,  319,  320,  321,  322,  258,   -1,   -1,  261,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  335,   -1,  337,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,
  303,  304,  305,  306,  307,   -1,  309,  310,  311,  312,
  313,  314,  315,  316,  317,  318,  319,  320,  321,  322,
  258,   -1,   -1,  261,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  335,   -1,  337,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,  303,  304,  305,  306,  307,
   -1,  309,  310,  311,  312,  313,  314,  315,  316,  317,
  318,  319,  320,  321,  322,  258,   -1,   -1,  261,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  335,   -1,  337,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,
  303,  304,  305,  306,  307,   -1,  309,  310,  311,  312,
  313,  314,  315,  316,  317,  318,  319,  320,  321,  322,
  258,   -1,   -1,  261,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  335,   -1,  337,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,  303,  304,  305,  306,  307,
   -1,  309,  310,  311,  312,  313,  314,  315,  316,  317,
  318,  319,  320,  321,  322,  258,   -1,   -1,  261,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  335,   -1,  337,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,
  303,  304,  305,  306,  307,   -1,  309,  310,  311,  312,
  313,  314,  315,  316,  317,  318,  319,  320,  321,  322,
  258,   -1,   -1,  261,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  335,   -1,  337,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,  303,  304,  305,  306,  307,
   -1,  309,  310,  311,  312,  313,  314,  315,  316,  317,
  318,  319,  320,  321,  322,  258,   -1,   -1,  261,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  335,   -1,  337,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,
  303,  304,  305,  306,  307,   -1,  309,  310,  311,  312,
  313,  314,  315,  316,  317,  318,  319,  258,   -1,   -1,
  261,  312,  313,  314,  315,  316,  317,  318,  319,  320,
  321,  322,  335,   -1,  337,  326,  327,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  336,   -1,   -1,   -1,   -1,
   -1,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,  303,  304,  305,  306,  307,   -1,  309,  310,
  311,  312,  313,  314,  315,  316,  317,  318,  319,  258,
   -1,   -1,  261,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  335,   -1,  337,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,  303,  304,  305,  306,  307,   -1,
  309,  310,  311,  312,  313,  314,  315,  316,  317,  258,
   -1,   -1,  261,  310,  311,  312,  313,  314,  315,  316,
  317,  318,  319,  320,  321,  322,  335,   -1,  337,  326,
  327,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  336,
   -1,   -1,   -1,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,  303,  304,  305,  306,  307,   -1,
  309,  310,  311,  312,  313,  314,  315,  316,  317,  258,
   -1,   -1,  261,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  335,   -1,  337,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,  303,  304,  305,  306,  307,   -1,
  309,  310,  311,  312,  313,  314,  315,  258,   -1,   -1,
  261,   -1,  309,  310,  311,  312,  313,  314,  315,  316,
  317,  318,  319,  320,  321,  322,  335,   -1,  337,  326,
  327,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  336,
   -1,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,  303,  304,  305,  306,  307,   -1,  309,  310,
  311,  312,  313,  314,  315,  258,   -1,   -1,  261,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  335,   -1,  337,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,
  303,  304,  305,  306,  307,   -1,  309,  310,  311,  312,
  313,  314,  315,  258,   -1,   -1,  261,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  335,  258,  337,   -1,  261,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  301,  302,  303,  304,
  305,  306,  307,   -1,  309,  310,  311,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  301,  302,  303,  304,
  305,  306,  307,   -1,  309,  310,  311,   -1,  258,   -1,
  335,  261,  337,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  258,   -1,   -1,  261,
  335,   -1,  337,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,  303,  304,  305,  306,  307,   -1,  309,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
  302,  303,  304,  305,  306,  307,  258,   -1,   -1,  261,
   -1,   -1,   -1,   -1,   -1,  335,   -1,  337,   -1,   -1,
   -1,  258,   -1,   -1,  261,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  335,   -1,  337,  258,   -1,   -1,  261,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
  302,  303,  304,  305,  306,  292,  293,  294,  295,  296,
  297,  298,  299,  300,  301,  302,  303,  304,  305,  258,
  292,  293,  261,  258,   -1,   -1,  261,  258,   -1,   -1,
  261,   -1,   -1,  335,   -1,  337,  281,  282,  283,  284,
  285,  286,  287,  288,  289,   -1,   -1,   -1,  335,   -1,
  337,   -1,   -1,  292,  293,   -1,   -1,  292,  293,   -1,
   -1,  292,  293,  335,  309,  337,   -1,   -1,   -1,   -1,
   -1,  258,   -1,  318,  319,  320,   -1,   -1,   -1,  324,
  325,  326,  327,   -1,   -1,   -1,   -1,   -1,  333,  334,
  335,   -1,   -1,   -1,   -1,   -1,  335,   -1,  337,   -1,
  335,   -1,  337,   -1,  335,   -1,  337,  294,  295,  296,
  297,  298,  299,  300,  301,  302,  303,  304,  305,  306,
  307,   -1,  309,  310,  311,  312,  313,  314,  315,  316,
  317,  318,  319,  320,  321,  322,   -1,   -1,   -1,  326,
  327,  259,  260,  261,   -1,  263,   -1,  265,  266,  336,
  268,  269,  270,  271,  272,  273,  274,  275,  276,  277,
  278,  279,  280,  281,  282,  283,  284,  285,  286,  287,
  288,  289,  290,  306,  307,   -1,  309,  310,  311,  312,
  313,  314,  315,  316,  317,  318,  319,  320,  321,  322,
   -1,  309,   -1,  326,  327,   -1,   -1,   -1,   -1,   -1,
  318,  319,  320,  336,   -1,   -1,  324,  325,  326,  327,
   -1,   -1,   -1,   -1,   -1,  333,  334,  259,   -1,  261,
   -1,  263,   -1,  265,  266,   -1,  268,  269,  270,  271,
  272,  273,  274,  275,  276,  277,  278,  279,  280,  281,
  282,  283,  284,  285,  286,  287,  288,  289,  290,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  261,   -1,   -1,   -1,   -1,  309,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  318,  319,  320,   -1,
   -1,   -1,  324,  325,  326,  327,   -1,   -1,   -1,   -1,
   -1,  333,  334,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,  303,  304,  305,  306,  307,  261,
  309,  310,  311,  312,  313,  314,  315,  316,  317,  318,
  319,  320,  321,  322,   -1,   -1,   -1,  326,  327,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  336,   -1,   -1,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
  302,  303,  304,  305,  306,  307,  261,  309,  310,  311,
  312,  313,  314,  315,  316,  317,  318,  319,  320,  321,
  322,   -1,   -1,   -1,  326,  327,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  336,   -1,   -1,  292,   -1,  294,
  295,  296,  297,  298,  299,  300,  301,  302,  303,  304,
  305,  306,  307,  261,  309,  310,  311,  312,  313,  314,
  315,  316,  317,  318,  319,  320,  321,  322,   -1,   -1,
   -1,  326,  327,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  336,   -1,   -1,   -1,   -1,  294,  295,  296,  297,
  298,  299,  300,  301,  302,  303,  304,  305,  306,  307,
  261,  309,  310,  311,  312,  313,  314,  315,  316,  317,
  318,  319,  320,  321,  322,   -1,   -1,   -1,  326,  327,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  336,   -1,
   -1,   -1,   -1,  294,  295,  296,  297,  298,  299,  300,
  301,  302,  303,  304,  305,  306,  307,  261,  309,  310,
  311,  312,  313,  314,  315,  316,  317,  318,  319,  320,
  321,  322,   -1,   -1,   -1,  326,  327,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  336,   -1,   -1,   -1,   -1,
  294,  295,  296,  297,  298,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  261,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,   -1,
   -1,   -1,  326,  327,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  336,   -1,   -1,   -1,   -1,  294,  295,  296,
  297,  298,  299,  300,  301,  302,  303,  304,  305,  306,
  307,   -1,  309,  310,  311,  312,  313,  314,  315,  316,
  317,  318,  319,  320,  321,  322,   -1,   -1,   -1,  326,
  327,  259,   -1,  261,   -1,  263,   -1,  265,  266,  336,
  268,  269,  270,  271,  272,  261,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  281,  282,  283,  284,  285,  286,  287,
  288,  289,  290,   -1,   -1,  281,  282,  283,  284,  285,
  286,  287,  288,  289,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  309,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  318,  319,  320,  309,   -1,   -1,  324,  325,  326,  327,
   -1,   -1,  318,  319,  320,  333,  334,   -1,  324,  325,
  326,  327,   -1,   -1,   -1,   -1,   -1,  333,  334,  273,
  274,  275,  276,  277,  278,  279,  280,  281,  282,  283,
  284,  285,  286,  287,  288,  289,   -1,   -1,   -1,  281,
  282,  283,  284,  285,  286,  287,  288,  289,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  309,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  318,  319,  320,  309,   -1,   -1,
  324,  325,  326,  327,   -1,   -1,  318,  319,  320,  333,
  334,   -1,  324,  325,  326,  327,   -1,   -1,   -1,   -1,
   -1,  333,  334,  292,   -1,  294,  295,  296,  297,  298,
  299,  300,  301,  302,  303,  304,  305,  306,  307,   -1,
  309,  310,  311,  312,  313,  314,  315,  316,  317,  318,
  319,  320,  321,  322,   -1,   -1,   -1,  326,  327,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  336,  294,  295,
  296,  297,  298,  299,  300,  301,  302,  303,  304,  305,
  306,  307,   -1,  309,  310,  311,  312,  313,  314,  315,
  316,  317,  318,  319,  320,  321,  322,   -1,   -1,   -1,
  326,  327,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  336,  337,  294,  295,  296,  297,  298,  299,  300,  301,
  302,  303,  304,  305,  306,  307,   -1,  309,  310,  311,
  312,  313,  314,  315,  316,  317,  318,  319,  320,  321,
  322,   -1,   -1,   -1,  326,  327,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  335,  336,  294,  295,  296,  297,  298,
  299,  300,  301,  302,  303,  304,  305,  306,  307,   -1,
  309,  310,  311,  312,  313,  314,  315,  316,  317,  318,
  319,  320,  321,  322,   -1,   -1,   -1,  326,  327,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  335,  336,  294,  295,
  296,  297,  298,  299,  300,  301,  302,  303,  304,  305,
  306,  307,   -1,  309,  310,  311,  312,  313,  314,  315,
  316,  317,  318,  319,  320,  321,  322,   -1,   -1,   -1,
  326,  327,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  335,
  336,  294,  295,  296,  297,  298,  299,  300,  301,  302,
  303,  304,  305,  306,  307,   -1,  309,  310,  311,  312,
  313,  314,  315,  316,  317,  318,  319,  320,  321,  322,
   -1,   -1,   -1,  326,  327,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  335,  336,  294,  295,  296,  297,  298,  299,
  300,  301,  302,  303,  304,  305,  306,  307,   -1,  309,
  310,  311,  312,  313,  314,  315,  316,  317,  318,  319,
  320,  321,  322,   -1,   -1,   -1,  326,  327,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  335,  336,  294,  295,  296,
  297,  298,  299,  300,  301,  302,  303,  304,  305,  306,
  307,   -1,  309,  310,  311,  312,  313,  314,  315,  316,
  317,  318,  319,  320,  321,  322,   -1,   -1,   -1,  326,
  327,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  307,  336,
  309,  310,  311,  312,  313,  314,  315,  316,  317,  318,
  319,  320,  321,  322,   -1,   -1,   -1,  326,  327,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  336,
};
#define YYFINAL 39
#ifndef YYDEBUG
#define YYDEBUG 0
#endif
#define YYMAXTOKEN 337
#if YYDEBUG
const char * const yyname[] = {
"end-of-file",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"BADTOKEN","COLON","LBRACE",
"RBRACE","SEMICOLON","NULL_OP","SWITCH","CASE","BREAK","CONTINUE","DEFAULT",
"DO","WHILE","FOR","GOTO","RETURN","TYPE_CHAR","TYPE_SHORT","TYPE_INT",
"TYPE_LONG","TYPE_FLOAT","TYPE_DOUBLE","TYPE_TIME_T","TYPE_UNSIGNED",
"CCONSTANT","ICONSTANT","UICONSTANT","LCONSTANT","ULCONSTANT","FCONSTANT",
"DCONSTANT","IDENT","STRING","IF","ELSE","COMMA","QUESTION","ASSIGN",
"ADD_ASSIGN","SUB_ASSIGN","MUL_ASSIGN","DIV_ASSIGN","MOD_ASSIGN",
"LSHIFT_ASSIGN","RSHIFT_ASSIGN","BITAND_ASSIGN","BITXOR_ASSIGN","BITOR_ASSIGN",
"OR","AND","BITOR","BITXOR","BITAND","EQ","NEQ","LT","LE","GT","GE","LSHIFT",
"RSHIFT","ADD","SUB","MUL","DIV","MOD","DPOINTER","NOT","BITNOT","INC","DEC",
"UMINUS","UADD","DOT","POINTER","ADDRESS","SIZEOF","LCURVE","RCURVE","LBRACKET",
"RBRACKET",
};
const char * const yyrule[] = {
"$accept : stmts",
"stmts : stmt",
"stmts : stmt stmts",
"stmt : declare_stmt",
"stmt : control_stmt",
"declare_stmt : type_def variable SEMICOLON",
"declare_stmt : type_def variable ASSIGN expr SEMICOLON",
"declare_stmt : type_def variable array SEMICOLON",
"declare_stmt : type_def variable array ASSIGN expr SEMICOLON",
"type_def : type_item",
"type_def : type_item pointers",
"type_item : TYPE_CHAR",
"type_item : TYPE_UNSIGNED TYPE_CHAR",
"type_item : TYPE_SHORT",
"type_item : TYPE_UNSIGNED TYPE_SHORT",
"type_item : TYPE_INT",
"type_item : TYPE_UNSIGNED TYPE_INT",
"type_item : TYPE_UNSIGNED",
"type_item : TYPE_LONG",
"type_item : TYPE_UNSIGNED TYPE_LONG",
"type_item : TYPE_FLOAT",
"type_item : TYPE_DOUBLE",
"type_item : TYPE_TIME_T",
"pointers : MUL",
"pointers : MUL pointers",
"variable : IDENT",
"variable : IDENT DOT IDENT",
"variable : IDENT DOT IDENT DOT IDENT",
"array : LBRACKET expr RBRACKET",
"array : LBRACKET expr RBRACKET array",
"control_stmt : expr_stmt",
"control_stmt : if_stmt",
"control_stmt : for_stmt",
"control_stmt : switch_stmt",
"control_stmt : while_stmt",
"control_stmt : dowhile_stmt",
"control_stmt : goto_stmt",
"control_stmt : break_stmt",
"control_stmt : continue_stmt",
"control_stmt : return_stmt",
"control_stmt : blank_stmt",
"control_stmt : question_stmt",
"control_stmt : compound_stmt",
"control_stmt : label_stmt",
"expr_stmt : expr SEMICOLON",
"expr_stmt : expr COMMA expr_stmt",
"if_stmt : IF LCURVE expr RCURVE control_stmt",
"if_stmt : IF LCURVE expr RCURVE control_stmt ELSE control_stmt",
"for_stmt : FOR LCURVE extend_expr SEMICOLON extend_expr SEMICOLON extend_expr RCURVE control_stmt",
"extend_expr : expr",
"extend_expr :",
"switch_stmt : SWITCH LCURVE expr RCURVE LBRACE switch_items RBRACE",
"switch_items : switch_item",
"switch_items : switch_item switch_items",
"switch_item : CASE number_type COLON stmts",
"switch_item : DEFAULT COLON stmts",
"number_type : CCONSTANT",
"number_type : ICONSTANT",
"number_type : UICONSTANT",
"number_type : LCONSTANT",
"number_type : ULCONSTANT",
"while_stmt : WHILE LCURVE expr RCURVE control_stmt",
"dowhile_stmt : DO control_stmt WHILE LCURVE expr RCURVE SEMICOLON",
"goto_stmt : GOTO IDENT SEMICOLON",
"break_stmt : BREAK SEMICOLON",
"continue_stmt : CONTINUE SEMICOLON",
"return_stmt : RETURN SEMICOLON",
"return_stmt : RETURN expr SEMICOLON",
"compound_stmt : LBRACE stmts RBRACE",
"compound_stmt : LBRACE RBRACE",
"blank_stmt : SEMICOLON",
"question_stmt : expr QUESTION expr COLON expr SEMICOLON",
"label_stmt : IDENT COLON",
"expr : CCONSTANT",
"expr : ICONSTANT",
"expr : UICONSTANT",
"expr : LCONSTANT",
"expr : ULCONSTANT",
"expr : FCONSTANT",
"expr : DCONSTANT",
"expr : STRING",
"expr : variable",
"expr : expr ASSIGN expr",
"expr : expr ADD_ASSIGN expr",
"expr : expr SUB_ASSIGN expr",
"expr : expr MUL_ASSIGN expr",
"expr : expr DIV_ASSIGN expr",
"expr : expr MOD_ASSIGN expr",
"expr : expr LSHIFT_ASSIGN expr",
"expr : expr RSHIFT_ASSIGN expr",
"expr : expr BITAND_ASSIGN expr",
"expr : expr BITXOR_ASSIGN expr",
"expr : expr BITOR_ASSIGN expr",
"expr : expr OR expr",
"expr : expr AND expr",
"expr : expr BITOR expr",
"expr : expr BITAND expr",
"expr : expr EQ expr",
"expr : expr NEQ expr",
"expr : expr LT expr",
"expr : expr LE expr",
"expr : expr GT expr",
"expr : expr GE expr",
"expr : expr LSHIFT expr",
"expr : expr RSHIFT expr",
"expr : expr ADD expr",
"expr : expr SUB expr",
"expr : expr MUL expr",
"expr : expr DIV expr",
"expr : expr MOD expr",
"expr : NOT expr",
"expr : BITNOT expr",
"expr : INC expr",
"expr : expr INC",
"expr : DEC expr",
"expr : expr DEC",
"expr : ADD expr",
"expr : SUB expr",
"expr : MUL expr",
"expr : BITAND expr",
"expr : SIZEOF expr",
"expr : IDENT LCURVE args RCURVE",
"expr : IDENT LCURVE RCURVE",
"expr : expr array",
"expr : LCURVE expr RCURVE",
"expr : LCURVE type_def RCURVE expr",
"args : expr",
"args : expr COMMA args",
};
#endif
#if YYDEBUG
#include <stdio.h>
#endif
#ifdef YYSTACKSIZE
#undef YYMAXDEPTH
#define YYMAXDEPTH YYSTACKSIZE
#else
#ifdef YYMAXDEPTH
#define YYSTACKSIZE YYMAXDEPTH
#else
#define YYSTACKSIZE 10000
#define YYMAXDEPTH 10000
#endif
#endif
#define YYINITSTACKSIZE 200
int yydebug;
int yynerrs;
int yyerrflag;
int yychar;
short *yyssp;
YYSTYPE *yyvsp;
YYSTYPE yyval;
YYSTYPE yylval;
short *yyss;
short *yysslim;
YYSTYPE *yyvs;
int yystacksize;
#line 867 "src/parser.y"

#include <string>
#include <vector>
#include "machine.h"

using namespace ai::sg;
using namespace ai::app;
using namespace std;

void yyerror(const char *s)
{
	if (inquote) {
		cerr << "\n" << (_("ERROR: end of input reached without terminating quote\n")).str(APPLOCALE);
	} else if (incomments) {
		cerr << "\n" << (_("ERROR: end of input reached without terminating */\n")).str(APPLOCALE);
	} else {
		cerr << "\n" << tminline << "\n";
		cerr << std::setfill('^') << std::setw(column) << "" << "\n";
		cerr << std::setfill('^') << std::setw(column) << s << "\n";
	}
	errcnt++;
}

#line 1085 "src/parser.cpp"
/* allocate initial stack or double stack size, up to YYMAXDEPTH */
static int yygrowstack()
{
    int newsize, i;
    short *newss;
    YYSTYPE *newvs;

    if ((newsize = yystacksize) == 0)
        newsize = YYINITSTACKSIZE;
    else if (newsize >= YYMAXDEPTH)
        return -1;
    else if ((newsize *= 2) > YYMAXDEPTH)
        newsize = YYMAXDEPTH;
    i = yyssp - yyss;
    newss = yyss ? (short *)realloc(yyss, newsize * sizeof *newss) :
      (short *)malloc(newsize * sizeof *newss);
    if (newss == NULL)
        return -1;
    yyss = newss;
    yyssp = newss + i;
    newvs = yyvs ? (YYSTYPE *)realloc(yyvs, newsize * sizeof *newvs) :
      (YYSTYPE *)malloc(newsize * sizeof *newvs);
    if (newvs == NULL)
        return -1;
    yyvs = newvs;
    yyvsp = newvs + i;
    yystacksize = newsize;
    yysslim = yyss + newsize - 1;
    return 0;
}

#define YYABORT goto yyabort
#define YYREJECT goto yyabort
#define YYACCEPT goto yyaccept
#define YYERROR goto yyerrlab

#ifndef YYPARSE_PARAM
#if defined(__cplusplus) || __STDC__
#define YYPARSE_PARAM_ARG void
#define YYPARSE_PARAM_DECL
#else	/* ! ANSI-C/C++ */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif	/* ANSI-C/C++ */
#else	/* YYPARSE_PARAM */
#ifndef YYPARSE_PARAM_TYPE
#define YYPARSE_PARAM_TYPE void *
#endif
#if defined(__cplusplus) || __STDC__
#define YYPARSE_PARAM_ARG YYPARSE_PARAM_TYPE YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else	/* ! ANSI-C/C++ */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL YYPARSE_PARAM_TYPE YYPARSE_PARAM;
#endif	/* ANSI-C/C++ */
#endif	/* ! YYPARSE_PARAM */

int
yyparse (YYPARSE_PARAM_ARG)
    YYPARSE_PARAM_DECL
{
    register int yym, yyn, yystate;
#if YYDEBUG
    register const char *yys;

    if ((yys = getenv("YYDEBUG")))
    {
        yyn = *yys;
        if (yyn >= '0' && yyn <= '9')
            yydebug = yyn - '0';
    }
#endif

    yynerrs = 0;
    yyerrflag = 0;
    yychar = (-1);

    if (yyss == NULL && yygrowstack()) goto yyoverflow;
    yyssp = yyss;
    yyvsp = yyvs;
    *yyssp = yystate = 0;

yyloop:
    if ((yyn = yydefred[yystate])) goto yyreduce;
    if (yychar < 0)
    {
        if ((yychar = yylex()) < 0) yychar = 0;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
            if (!yys) yys = "illegal-symbol";
            printf("%sdebug: state %d, reading %d (%s)\n",
                    YYPREFIX, yystate, yychar, yys);
        }
#endif
    }
    if ((yyn = yysindex[yystate]) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
    {
#if YYDEBUG
        if (yydebug)
            printf("%sdebug: state %d, shifting to state %d\n",
                    YYPREFIX, yystate, yytable[yyn]);
#endif
        if (yyssp >= yysslim && yygrowstack())
        {
            goto yyoverflow;
        }
        *++yyssp = yystate = yytable[yyn];
        *++yyvsp = yylval;
        yychar = (-1);
        if (yyerrflag > 0)  --yyerrflag;
        goto yyloop;
    }
    if ((yyn = yyrindex[yystate]) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
    {
        yyn = yytable[yyn];
        goto yyreduce;
    }
    if (yyerrflag) goto yyinrecovery;
#if defined(lint) || defined(__GNUC__)
    goto yynewerror;
#endif
yynewerror:
    yyerror("syntax error");
#if defined(lint) || defined(__GNUC__)
    goto yyerrlab;
#endif
yyerrlab:
    ++yynerrs;
yyinrecovery:
    if (yyerrflag < 3)
    {
        yyerrflag = 3;
        for (;;)
        {
            if ((yyn = yysindex[*yyssp]) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
#if YYDEBUG
                if (yydebug)
                    printf("%sdebug: state %d, error recovery shifting\
 to state %d\n", YYPREFIX, *yyssp, yytable[yyn]);
#endif
                if (yyssp >= yysslim && yygrowstack())
                {
                    goto yyoverflow;
                }
                *++yyssp = yystate = yytable[yyn];
                *++yyvsp = yylval;
                goto yyloop;
            }
            else
            {
#if YYDEBUG
                if (yydebug)
                    printf("%sdebug: error recovery discarding state %d\n",
                            YYPREFIX, *yyssp);
#endif
                if (yyssp <= yyss) goto yyabort;
                --yyssp;
                --yyvsp;
            }
        }
    }
    else
    {
        if (yychar == 0) goto yyabort;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
            if (!yys) yys = "illegal-symbol";
            printf("%sdebug: state %d, error recovery discards token %d (%s)\n",
                    YYPREFIX, yystate, yychar, yys);
        }
#endif
        yychar = (-1);
        goto yyloop;
    }
yyreduce:
#if YYDEBUG
    if (yydebug)
        printf("%sdebug: state %d, reducing by rule %d (%s)\n",
                YYPREFIX, yystate, yyn, yyrule[yyn]);
#endif
    yym = yylen[yyn];
    yyval = yyvsp[1-yym];
    switch (yyn)
    {
case 1:
#line 124 "src/parser.y"
{
		yyval.stmts = new parser_stmts_t();
		(yyval.stmts)->push_front(yyvsp[0].stmt);

		prsp_ctx *PRSP = prsp_ctx::instance();
		PRSP->_PRSP_stmts = yyval.stmts;
	}
break;
case 2:
#line 132 "src/parser.y"
{
		yyval.stmts = yyvsp[0].stmts;
		(yyval.stmts)->push_front(yyvsp[-1].stmt);

		prsp_ctx *PRSP = prsp_ctx::instance();
		PRSP->_PRSP_stmts = yyval.stmts;
	}
break;
case 3:
#line 143 "src/parser.y"
{
		yyval.stmt = yyvsp[0].declare;
	}
break;
case 4:
#line 147 "src/parser.y"
{
		yyval.stmt = yyvsp[0].ctrl;
	}
break;
case 5:
#line 154 "src/parser.y"
{
		yyval.declare = new parser_declare_t(yyvsp[-2].type, yyvsp[-1].variable, NULL);
		(yyval.declare)->push_str(yyvsp[0].sval);
	}
break;
case 6:
#line 159 "src/parser.y"
{
		yyval.declare = new parser_declare_t(yyvsp[-4].type, yyvsp[-3].variable, yyvsp[-1].expr);
		(yyval.declare)->push_str(yyvsp[-2].sval);
		(yyval.declare)->push_str(yyvsp[0].sval);
	}
break;
case 7:
#line 165 "src/parser.y"
{
		(yyvsp[-3].type)->set_exprs(yyvsp[-1].exprs);
		yyval.declare = new parser_declare_t(yyvsp[-3].type, yyvsp[-2].variable, NULL);
		(yyval.declare)->push_str(yyvsp[0].sval);
	}
break;
case 8:
#line 171 "src/parser.y"
{
		(yyvsp[-5].type)->set_exprs(yyvsp[-3].exprs);
		yyval.declare = new parser_declare_t(yyvsp[-5].type, yyvsp[-4].variable, yyvsp[-1].expr);
		(yyval.declare)->push_str(yyvsp[-2].sval);
		(yyval.declare)->push_str(yyvsp[0].sval);
	}
break;
case 9:
#line 181 "src/parser.y"
{
		yyval.type = new parser_type_t(yyvsp[0].item, NULL, NULL);
	}
break;
case 10:
#line 185 "src/parser.y"
{
		yyval.type = new parser_type_t(yyvsp[-1].item, yyvsp[0].pointers, NULL);
	}
break;
case 11:
#line 192 "src/parser.y"
{
		yyval.item = new parser_item_t(false, PARSER_TYPE_CHAR);
		(yyval.item)->push_str(yyvsp[0].sval);
	}
break;
case 12:
#line 197 "src/parser.y"
{
		yyval.item = new parser_item_t(true, PARSER_TYPE_CHAR);
		(yyval.item)->push_str(yyvsp[-1].sval);
		(yyval.item)->push_str(yyvsp[0].sval);
	}
break;
case 13:
#line 203 "src/parser.y"
{
		yyval.item = new parser_item_t(false, PARSER_TYPE_SHORT);
		(yyval.item)->push_str(yyvsp[0].sval);
	}
break;
case 14:
#line 208 "src/parser.y"
{
		yyval.item = new parser_item_t(true, PARSER_TYPE_SHORT);
		(yyval.item)->push_str(yyvsp[-1].sval);
		(yyval.item)->push_str(yyvsp[0].sval);
	}
break;
case 15:
#line 214 "src/parser.y"
{
		yyval.item = new parser_item_t(false, PARSER_TYPE_INT);
		(yyval.item)->push_str(yyvsp[0].sval);
	}
break;
case 16:
#line 219 "src/parser.y"
{
		yyval.item = new parser_item_t(true, PARSER_TYPE_INT);
		(yyval.item)->push_str(yyvsp[-1].sval);
		(yyval.item)->push_str(yyvsp[0].sval);
	}
break;
case 17:
#line 225 "src/parser.y"
{
		yyval.item = new parser_item_t(true, PARSER_TYPE_INT);
		(yyval.item)->push_str(yyvsp[0].sval);
	}
break;
case 18:
#line 230 "src/parser.y"
{
		yyval.item = new parser_item_t(false, PARSER_TYPE_LONG);
		(yyval.item)->push_str(yyvsp[0].sval);
	}
break;
case 19:
#line 235 "src/parser.y"
{
		yyval.item = new parser_item_t(true, PARSER_TYPE_LONG);
		(yyval.item)->push_str(yyvsp[-1].sval);
		(yyval.item)->push_str(yyvsp[0].sval);
	}
break;
case 20:
#line 241 "src/parser.y"
{
		yyval.item = new parser_item_t(false, PARSER_TYPE_FLOAT);
		(yyval.item)->push_str(yyvsp[0].sval);
	}
break;
case 21:
#line 246 "src/parser.y"
{
		yyval.item = new parser_item_t(false, PARSER_TYPE_DOUBLE);
		(yyval.item)->push_str(yyvsp[0].sval);
	}
break;
case 22:
#line 251 "src/parser.y"
{
		yyval.item = new parser_item_t(false, PARSER_TYPE_TIME_T);
		(yyval.item)->push_str(yyvsp[0].sval);
	}
break;
case 23:
#line 259 "src/parser.y"
{
		yyval.pointers = new parser_pointers_t();
		(yyval.pointers)->push_str(yyvsp[0].sval);
		(yyval.pointers)->set_pointers((yyval.pointers)->get_pointers() + 1);
	}
break;
case 24:
#line 265 "src/parser.y"
{
		yyval.pointers = yyvsp[0].pointers;
		(yyval.pointers)->push_str(yyvsp[-1].sval);
		(yyval.pointers)->set_pointers((yyval.pointers)->get_pointers() + 1);
	}
break;
case 25:
#line 274 "src/parser.y"
{
		yyval.variable = new parser_variable_t(NULL, NULL, yyvsp[0].sval);
	}
break;
case 26:
#line 278 "src/parser.y"
{
		yyval.variable = new parser_variable_t(NULL, yyvsp[-2].sval, yyvsp[0].sval);
		(yyval.variable)->push_str(yyvsp[-1].sval);
	}
break;
case 27:
#line 283 "src/parser.y"
{
		yyval.variable = new parser_variable_t(yyvsp[-4].sval, yyvsp[-2].sval, yyvsp[0].sval);
		(yyval.variable)->push_str(yyvsp[-3].sval);
		(yyval.variable)->push_str(yyvsp[-1].sval);
	}
break;
case 28:
#line 292 "src/parser.y"
{
		yyval.exprs = new parser_exprs_t();
		(yyval.exprs)->push_front(yyvsp[-1].expr);
		(yyval.exprs)->push_str(yyvsp[-2].sval);
		(yyval.exprs)->push_str(yyvsp[0].sval);
	}
break;
case 29:
#line 299 "src/parser.y"
{
		yyval.exprs = yyvsp[0].exprs;
		(yyval.exprs)->push_front(yyvsp[-2].expr);
		(yyval.exprs)->push_str(yyvsp[-3].sval);
		(yyval.exprs)->push_str(yyvsp[-1].sval);
	}
break;
case 30:
#line 309 "src/parser.y"
{
 		yyval.ctrl = yyvsp[0].expr_stmt;
 	}
break;
case 31:
#line 313 "src/parser.y"
{
 		yyval.ctrl = yyvsp[0].if_stmt;
 	}
break;
case 32:
#line 317 "src/parser.y"
{
 		yyval.ctrl = yyvsp[0].for_stmt;
 	}
break;
case 33:
#line 321 "src/parser.y"
{
 		yyval.ctrl = yyvsp[0].switch_stmt;
 	}
break;
case 34:
#line 325 "src/parser.y"
{
 		yyval.ctrl = yyvsp[0].while_stmt;
 	}
break;
case 35:
#line 329 "src/parser.y"
{
 		yyval.ctrl = yyvsp[0].dowhile_stmt;
 	}
break;
case 36:
#line 333 "src/parser.y"
{
 		yyval.ctrl = yyvsp[0].goto_stmt;
 	}
break;
case 37:
#line 337 "src/parser.y"
{
 		yyval.ctrl = yyvsp[0].break_stmt;
 	}
break;
case 38:
#line 341 "src/parser.y"
{
 		yyval.ctrl = yyvsp[0].continue_stmt;
 	}
break;
case 39:
#line 345 "src/parser.y"
{
 		yyval.ctrl = yyvsp[0].return_stmt;
 	}
break;
case 40:
#line 349 "src/parser.y"
{
 		yyval.ctrl = yyvsp[0].blank_stmt;
 	}
break;
case 41:
#line 353 "src/parser.y"
{
 		yyval.ctrl = yyvsp[0].question_stmt;
 	}
break;
case 42:
#line 357 "src/parser.y"
{
 		yyval.ctrl = yyvsp[0].compound_stmt;
 	}
break;
case 43:
#line 361 "src/parser.y"
{
 		yyval.ctrl = yyvsp[0].label_stmt;
 	}
break;
case 44:
#line 368 "src/parser.y"
{
 		yyval.expr_stmt = new parser_expr_stmt_t();
 		(yyval.expr_stmt)->push_front(yyvsp[-1].expr);
 		(yyval.expr_stmt)->push_str(yyvsp[0].sval);
 	}
break;
case 45:
#line 374 "src/parser.y"
{
		yyval.expr_stmt = yyvsp[0].expr_stmt;
		(yyval.expr_stmt)->push_front(yyvsp[-2].expr);
		(yyval.expr_stmt)->push_str(yyvsp[-1].sval);
	}
break;
case 46:
#line 383 "src/parser.y"
{
		yyval.if_stmt = new parser_if_stmt_t(yyvsp[-2].expr, yyvsp[0].ctrl, NULL);
		(yyval.if_stmt)->push_str(yyvsp[-4].sval);
		(yyval.if_stmt)->push_str(yyvsp[-3].sval);
		(yyval.if_stmt)->push_str(yyvsp[-1].sval);
	}
break;
case 47:
#line 390 "src/parser.y"
{
		yyval.if_stmt = new parser_if_stmt_t(yyvsp[-4].expr, yyvsp[-2].ctrl, yyvsp[0].ctrl);
		(yyval.if_stmt)->push_str(yyvsp[-6].sval);
		(yyval.if_stmt)->push_str(yyvsp[-5].sval);
		(yyval.if_stmt)->push_str(yyvsp[-3].sval);
		(yyval.if_stmt)->push_str(yyvsp[-1].sval);
	}
break;
case 48:
#line 401 "src/parser.y"
{
		yyval.for_stmt = new parser_for_stmt_t(yyvsp[-6].expr, yyvsp[-4].expr, yyvsp[-2].expr, yyvsp[0].ctrl);
		(yyval.for_stmt)->push_str(yyvsp[-8].sval);
		(yyval.for_stmt)->push_str(yyvsp[-7].sval);
		(yyval.for_stmt)->push_str(yyvsp[-5].sval);
		(yyval.for_stmt)->push_str(yyvsp[-3].sval);
		(yyval.for_stmt)->push_str(yyvsp[-1].sval);
	}
break;
case 49:
#line 413 "src/parser.y"
{
		yyval.expr = yyvsp[0].expr;
	}
break;
case 50:
#line 417 "src/parser.y"
{
		yyval.expr = NULL;
	}
break;
case 51:
#line 424 "src/parser.y"
{
		yyval.switch_stmt = new parser_switch_stmt_t(yyvsp[-4].expr, yyvsp[-1].switch_items);
		(yyval.switch_stmt)->push_str(yyvsp[-6].sval);
		(yyval.switch_stmt)->push_str(yyvsp[-5].sval);
		(yyval.switch_stmt)->push_str(yyvsp[-3].sval);
		(yyval.switch_stmt)->push_str(yyvsp[-2].sval);
		(yyval.switch_stmt)->push_str(yyvsp[0].sval);
	}
break;
case 52:
#line 436 "src/parser.y"
{
		yyval.switch_items = new parser_cases_t();
		(yyval.switch_items)->push_front(yyvsp[0].switch_item);
	}
break;
case 53:
#line 441 "src/parser.y"
{
		yyval.switch_items = yyvsp[0].switch_items;
		(yyval.switch_items)->push_front(yyvsp[-1].switch_item);
	}
break;
case 54:
#line 449 "src/parser.y"
{
		yyval.switch_item = new parser_case_t(yyvsp[-2].sval, yyvsp[0].stmts);
		(yyval.switch_item)->push_str(yyvsp[-3].sval);
		(yyval.switch_item)->push_str(yyvsp[-1].sval);
	}
break;
case 55:
#line 455 "src/parser.y"
{
		yyval.switch_item = new parser_case_t(NULL, yyvsp[0].stmts);
		(yyval.switch_item)->push_str(yyvsp[-2].sval);
		(yyval.switch_item)->push_str(yyvsp[-1].sval);
	}
break;
case 56:
#line 464 "src/parser.y"
{
		yyval.sval = yyvsp[0].sval;
 	}
break;
case 57:
#line 468 "src/parser.y"
{
		yyval.sval = yyvsp[0].sval;
	}
break;
case 58:
#line 472 "src/parser.y"
{
		yyval.sval = yyvsp[0].sval;
	}
break;
case 59:
#line 476 "src/parser.y"
{
		yyval.sval = yyvsp[0].sval;
	}
break;
case 60:
#line 480 "src/parser.y"
{
		yyval.sval = yyvsp[0].sval;
	}
break;
case 61:
#line 487 "src/parser.y"
{
		yyval.while_stmt = new parser_while_stmt_t(yyvsp[-2].expr, yyvsp[0].ctrl);
		(yyval.while_stmt)->push_str(yyvsp[-4].sval);
		(yyval.while_stmt)->push_str(yyvsp[-3].sval);
		(yyval.while_stmt)->push_str(yyvsp[-1].sval);
	}
break;
case 62:
#line 497 "src/parser.y"
{
		yyval.dowhile_stmt = new parser_dowhile_stmt_t(yyvsp[-5].ctrl, yyvsp[-2].expr);
		(yyval.dowhile_stmt)->push_str(yyvsp[-6].sval);
		(yyval.dowhile_stmt)->push_str(yyvsp[-4].sval);
		(yyval.dowhile_stmt)->push_str(yyvsp[-3].sval);
		(yyval.dowhile_stmt)->push_str(yyvsp[-1].sval);
		(yyval.dowhile_stmt)->push_str(yyvsp[0].sval);
	}
break;
case 63:
#line 509 "src/parser.y"
{
		yyval.goto_stmt = new parser_goto_stmt_t(yyvsp[-1].sval);
		(yyval.goto_stmt)->push_str(yyvsp[-2].sval);
		(yyval.goto_stmt)->push_str(yyvsp[0].sval);
	}
break;
case 64:
#line 518 "src/parser.y"
{
		yyval.break_stmt = new parser_break_stmt_t();
		(yyval.break_stmt)->push_str(yyvsp[-1].sval);
		(yyval.break_stmt)->push_str(yyvsp[0].sval);
	}
break;
case 65:
#line 527 "src/parser.y"
{
		yyval.continue_stmt = new parser_continue_stmt_t();
		(yyval.continue_stmt)->push_str(yyvsp[-1].sval);
		(yyval.continue_stmt)->push_str(yyvsp[0].sval);
	}
break;
case 66:
#line 536 "src/parser.y"
{
		yyval.return_stmt = new parser_return_stmt_t(NULL);
		(yyval.return_stmt)->push_str(yyvsp[-1].sval);
		(yyval.return_stmt)->push_str(yyvsp[0].sval);
	}
break;
case 67:
#line 542 "src/parser.y"
{
		yyval.return_stmt = new parser_return_stmt_t(yyvsp[-1].expr);
		(yyval.return_stmt)->push_str(yyvsp[-2].sval);
		(yyval.return_stmt)->push_str(yyvsp[0].sval);
	}
break;
case 68:
#line 551 "src/parser.y"
{
		yyval.compound_stmt = new parser_compound_stmt_t(yyvsp[-1].stmts);
		(yyval.compound_stmt)->push_str(yyvsp[-2].sval);
		(yyval.compound_stmt)->push_str(yyvsp[0].sval);
	}
break;
case 69:
#line 557 "src/parser.y"
{
		yyval.compound_stmt = new parser_compound_stmt_t(NULL);
		(yyval.compound_stmt)->push_str(yyvsp[-1].sval);
		(yyval.compound_stmt)->push_str(yyvsp[0].sval);
	}
break;
case 70:
#line 566 "src/parser.y"
{
		yyval.blank_stmt = new parser_blank_stmt_t();
		(yyval.blank_stmt)->push_str(yyvsp[0].sval);
	}
break;
case 71:
#line 574 "src/parser.y"
{
		yyval.question_stmt = new parser_question_stmt_t(yyvsp[-5].expr, yyvsp[-3].expr, yyvsp[-1].expr);
		(yyval.question_stmt)->push_str(yyvsp[-4].sval);
		(yyval.question_stmt)->push_str(yyvsp[-2].sval);
		(yyval.question_stmt)->push_str(yyvsp[0].sval);
	}
break;
case 72:
#line 584 "src/parser.y"
{
		yyval.label_stmt = new parser_label_stmt_t(yyvsp[-1].sval);
		(yyval.label_stmt)->push_str(yyvsp[0].sval);
	}
break;
case 73:
#line 592 "src/parser.y"
{
		yyval.expr = new parser_expr_t(yyvsp[0].sval);
	}
break;
case 74:
#line 596 "src/parser.y"
{
		yyval.expr = new parser_expr_t(yyvsp[0].sval);
	}
break;
case 75:
#line 600 "src/parser.y"
{
		yyval.expr = new parser_expr_t(yyvsp[0].sval);
	}
break;
case 76:
#line 604 "src/parser.y"
{
		yyval.expr = new parser_expr_t(yyvsp[0].sval);
	}
break;
case 77:
#line 608 "src/parser.y"
{
		yyval.expr = new parser_expr_t(yyvsp[0].sval);
	}
break;
case 78:
#line 612 "src/parser.y"
{
		yyval.expr = new parser_expr_t(yyvsp[0].sval);
	}
break;
case 79:
#line 616 "src/parser.y"
{
		yyval.expr = new parser_expr_t(yyvsp[0].sval);
	}
break;
case 80:
#line 620 "src/parser.y"
{
		yyval.expr = new parser_expr_t(yyvsp[0].sval);
	}
break;
case 81:
#line 624 "src/parser.y"
{
		yyval.expr = new parser_expr_t(yyvsp[0].variable);
	}
break;
case 82:
#line 628 "src/parser.y"
{
		yyval.expr = new parser_expr_t(yyvsp[-2].expr, ASSIGN, yyvsp[0].expr);
		(yyval.expr)->push_str(yyvsp[-1].sval);
	}
break;
case 83:
#line 633 "src/parser.y"
{
		yyval.expr = new parser_expr_t(yyvsp[-2].expr, ADD_ASSIGN, yyvsp[0].expr);
		(yyval.expr)->push_str(yyvsp[-1].sval);
	}
break;
case 84:
#line 638 "src/parser.y"
{
		yyval.expr = new parser_expr_t(yyvsp[-2].expr, SUB_ASSIGN, yyvsp[0].expr);
		(yyval.expr)->push_str(yyvsp[-1].sval);
	}
break;
case 85:
#line 643 "src/parser.y"
{
		yyval.expr = new parser_expr_t(yyvsp[-2].expr, MUL_ASSIGN, yyvsp[0].expr);
		(yyval.expr)->push_str(yyvsp[-1].sval);
	}
break;
case 86:
#line 648 "src/parser.y"
{
		yyval.expr = new parser_expr_t(yyvsp[-2].expr, DIV_ASSIGN, yyvsp[0].expr);
		(yyval.expr)->push_str(yyvsp[-1].sval);
	}
break;
case 87:
#line 653 "src/parser.y"
{
		yyval.expr = new parser_expr_t(yyvsp[-2].expr, MOD_ASSIGN, yyvsp[0].expr);
		(yyval.expr)->push_str(yyvsp[-1].sval);
	}
break;
case 88:
#line 658 "src/parser.y"
{
		yyval.expr = new parser_expr_t(yyvsp[-2].expr, LSHIFT_ASSIGN, yyvsp[0].expr);
		(yyval.expr)->push_str(yyvsp[-1].sval);
	}
break;
case 89:
#line 663 "src/parser.y"
{
		yyval.expr = new parser_expr_t(yyvsp[-2].expr, RSHIFT_ASSIGN, yyvsp[0].expr);
		(yyval.expr)->push_str(yyvsp[-1].sval);
	}
break;
case 90:
#line 668 "src/parser.y"
{
		yyval.expr = new parser_expr_t(yyvsp[-2].expr, BITAND_ASSIGN, yyvsp[0].expr);
		(yyval.expr)->push_str(yyvsp[-1].sval);
	}
break;
case 91:
#line 673 "src/parser.y"
{
		yyval.expr = new parser_expr_t(yyvsp[-2].expr, BITXOR_ASSIGN, yyvsp[0].expr);
		(yyval.expr)->push_str(yyvsp[-1].sval);
	}
break;
case 92:
#line 678 "src/parser.y"
{
		yyval.expr = new parser_expr_t(yyvsp[-2].expr, BITOR_ASSIGN, yyvsp[0].expr);
		(yyval.expr)->push_str(yyvsp[-1].sval);
	}
break;
case 93:
#line 683 "src/parser.y"
{
		yyval.expr = new parser_expr_t(yyvsp[-2].expr, OR, yyvsp[0].expr);
		(yyval.expr)->push_str(yyvsp[-1].sval);
	}
break;
case 94:
#line 688 "src/parser.y"
{
		yyval.expr = new parser_expr_t(yyvsp[-2].expr, AND, yyvsp[0].expr);
		(yyval.expr)->push_str(yyvsp[-1].sval);
	}
break;
case 95:
#line 693 "src/parser.y"
{
		yyval.expr = new parser_expr_t(yyvsp[-2].expr, BITOR, yyvsp[0].expr);
		(yyval.expr)->push_str(yyvsp[-1].sval);
	}
break;
case 96:
#line 698 "src/parser.y"
{
		yyval.expr = new parser_expr_t(yyvsp[-2].expr, BITAND, yyvsp[0].expr);
		(yyval.expr)->push_str(yyvsp[-1].sval);
	}
break;
case 97:
#line 703 "src/parser.y"
{
		yyval.expr = new parser_expr_t(yyvsp[-2].expr, EQ, yyvsp[0].expr);
		(yyval.expr)->push_str(yyvsp[-1].sval);
	}
break;
case 98:
#line 708 "src/parser.y"
{
		yyval.expr = new parser_expr_t(yyvsp[-2].expr, NEQ, yyvsp[0].expr);
		(yyval.expr)->push_str(yyvsp[-1].sval);
	}
break;
case 99:
#line 713 "src/parser.y"
{
		yyval.expr = new parser_expr_t(yyvsp[-2].expr, LT, yyvsp[0].expr);
		(yyval.expr)->push_str(yyvsp[-1].sval);
	}
break;
case 100:
#line 718 "src/parser.y"
{
		yyval.expr = new parser_expr_t(yyvsp[-2].expr, LE, yyvsp[0].expr);
		(yyval.expr)->push_str(yyvsp[-1].sval);
	}
break;
case 101:
#line 723 "src/parser.y"
{
		yyval.expr = new parser_expr_t(yyvsp[-2].expr, GT, yyvsp[0].expr);
		(yyval.expr)->push_str(yyvsp[-1].sval);
	}
break;
case 102:
#line 728 "src/parser.y"
{
		yyval.expr = new parser_expr_t(yyvsp[-2].expr, GE, yyvsp[0].expr);
		(yyval.expr)->push_str(yyvsp[-1].sval);
	}
break;
case 103:
#line 733 "src/parser.y"
{
		yyval.expr = new parser_expr_t(yyvsp[-2].expr, LSHIFT, yyvsp[0].expr);
		(yyval.expr)->push_str(yyvsp[-1].sval);
	}
break;
case 104:
#line 738 "src/parser.y"
{
		yyval.expr = new parser_expr_t(yyvsp[-2].expr, RSHIFT, yyvsp[0].expr);
		(yyval.expr)->push_str(yyvsp[-1].sval);
	}
break;
case 105:
#line 743 "src/parser.y"
{
		yyval.expr = new parser_expr_t(yyvsp[-2].expr, ADD, yyvsp[0].expr);
		(yyval.expr)->push_str(yyvsp[-1].sval);
	}
break;
case 106:
#line 748 "src/parser.y"
{
		yyval.expr = new parser_expr_t(yyvsp[-2].expr, SUB, yyvsp[0].expr);
		(yyval.expr)->push_str(yyvsp[-1].sval);
	}
break;
case 107:
#line 753 "src/parser.y"
{
		yyval.expr = new parser_expr_t(yyvsp[-2].expr, MUL, yyvsp[0].expr);
		(yyval.expr)->push_str(yyvsp[-1].sval);
	}
break;
case 108:
#line 758 "src/parser.y"
{
		yyval.expr = new parser_expr_t(yyvsp[-2].expr, DIV, yyvsp[0].expr);
		(yyval.expr)->push_str(yyvsp[-1].sval);
	}
break;
case 109:
#line 763 "src/parser.y"
{
		yyval.expr = new parser_expr_t(yyvsp[-2].expr, MOD, yyvsp[0].expr);
		(yyval.expr)->push_str(yyvsp[-1].sval);
	}
break;
case 110:
#line 768 "src/parser.y"
{
		yyval.expr = new parser_expr_t(NOT, yyvsp[0].expr);
		(yyval.expr)->push_str(yyvsp[-1].sval);
	}
break;
case 111:
#line 773 "src/parser.y"
{
		yyval.expr = new parser_expr_t(BITNOT, yyvsp[0].expr);
		(yyval.expr)->push_str(yyvsp[-1].sval);
	}
break;
case 112:
#line 778 "src/parser.y"
{
		yyval.expr = new parser_expr_t(INC, yyvsp[0].expr);
		(yyval.expr)->push_str(yyvsp[-1].sval);
	}
break;
case 113:
#line 783 "src/parser.y"
{
		yyval.expr = new parser_expr_t(yyvsp[-1].expr, INC);
		(yyval.expr)->push_str(yyvsp[0].sval);
	}
break;
case 114:
#line 788 "src/parser.y"
{
		yyval.expr = new parser_expr_t(DEC, yyvsp[0].expr);
		(yyval.expr)->push_str(yyvsp[-1].sval);
	}
break;
case 115:
#line 793 "src/parser.y"
{
		yyval.expr = new parser_expr_t(yyvsp[-1].expr, DEC);
		(yyval.expr)->push_str(yyvsp[0].sval);
	}
break;
case 116:
#line 798 "src/parser.y"
{
		yyval.expr = new parser_expr_t(UADD, yyvsp[0].expr);
		(yyval.expr)->push_str(yyvsp[-1].sval);
	}
break;
case 117:
#line 803 "src/parser.y"
{
		yyval.expr = new parser_expr_t(UMINUS, yyvsp[0].expr);
		(yyval.expr)->push_str(yyvsp[-1].sval);
	}
break;
case 118:
#line 808 "src/parser.y"
{
		yyval.expr = new parser_expr_t(POINTER, yyvsp[0].expr);
		(yyval.expr)->push_str(yyvsp[-1].sval);
	}
break;
case 119:
#line 813 "src/parser.y"
{
		yyval.expr = new parser_expr_t(ADDRESS, yyvsp[0].expr);
		(yyval.expr)->push_str(yyvsp[-1].sval);
	}
break;
case 120:
#line 818 "src/parser.y"
{
		yyval.expr = new parser_expr_t(SIZEOF, yyvsp[0].expr);
		(yyval.expr)->push_str(yyvsp[-1].sval);
	}
break;
case 121:
#line 823 "src/parser.y"
{
		yyval.expr = new parser_expr_t(yyvsp[-3].sval, yyvsp[-1].args);
		(yyval.expr)->push_str(yyvsp[-2].sval);
		(yyval.expr)->push_str(yyvsp[0].sval);
	}
break;
case 122:
#line 829 "src/parser.y"
{
		yyval.expr = new parser_expr_t(yyvsp[-2].sval, NULL);
		(yyval.expr)->push_str(yyvsp[-1].sval);
		(yyval.expr)->push_str(yyvsp[0].sval);
	}
break;
case 123:
#line 835 "src/parser.y"
{
		yyval.expr = new parser_expr_t(yyvsp[-1].expr, yyvsp[0].exprs);
	}
break;
case 124:
#line 839 "src/parser.y"
{
		yyval.expr = new parser_expr_t(LCURVE, yyvsp[-1].expr);
		(yyval.expr)->push_str(yyvsp[-2].sval);
		(yyval.expr)->push_str(yyvsp[0].sval);
	}
break;
case 125:
#line 845 "src/parser.y"
{
		yyval.expr = new parser_expr_t(yyvsp[-2].type, yyvsp[0].expr);
		(yyval.expr)->push_str(yyvsp[-3].sval);
		(yyval.expr)->push_str(yyvsp[-1].sval);
	}
break;
case 126:
#line 854 "src/parser.y"
{
		yyval.args = new parser_args_t();
		(yyval.args)->push_front(yyvsp[0].expr);
	}
break;
case 127:
#line 859 "src/parser.y"
{
		yyval.args = yyvsp[0].args;
		(yyval.args)->push_front(yyvsp[-2].expr);
		(yyval.args)->push_str(yyvsp[-1].sval);
	}
break;
#line 2191 "src/parser.cpp"
    }
    yyssp -= yym;
    yystate = *yyssp;
    yyvsp -= yym;
    yym = yylhs[yyn];
    if (yystate == 0 && yym == 0)
    {
#if YYDEBUG
        if (yydebug)
            printf("%sdebug: after reduction, shifting from state 0 to\
 state %d\n", YYPREFIX, YYFINAL);
#endif
        yystate = YYFINAL;
        *++yyssp = YYFINAL;
        *++yyvsp = yyval;
        if (yychar < 0)
        {
            if ((yychar = yylex()) < 0) yychar = 0;
#if YYDEBUG
            if (yydebug)
            {
                yys = 0;
                if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
                if (!yys) yys = "illegal-symbol";
                printf("%sdebug: state %d, reading %d (%s)\n",
                        YYPREFIX, YYFINAL, yychar, yys);
            }
#endif
        }
        if (yychar == 0) goto yyaccept;
        goto yyloop;
    }
    if ((yyn = yygindex[yym]) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn];
    else
        yystate = yydgoto[yym];
#if YYDEBUG
    if (yydebug)
        printf("%sdebug: after reduction, shifting from state %d \
to state %d\n", YYPREFIX, *yyssp, yystate);
#endif
    if (yyssp >= yysslim && yygrowstack())
    {
        goto yyoverflow;
    }
    *++yyssp = yystate;
    *++yyvsp = yyval;
    goto yyloop;
yyoverflow:
    yyerror("yacc stack overflow");
yyabort:
    return (1);
yyaccept:
    return (0);
}
